// ambient, diffuse and specular light formulas taken from https://learnopengl.com/Lighting/Basic-Lighting

#version 440

#define NUM_OF_POINT_LIGHTS 5

out vec4 FragColor;

in vec3 Normal;
in vec3 FragPos;
in vec2 v_TexCoord;

struct Material {
	sampler2D diffuse;
	vec3 specular;
	float shininess;
};

struct PointLight {
	vec3 position;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;

	float constant;
	float linear;
	float quadratic;
};

uniform vec3 viewPos; 
uniform Material material;
uniform PointLight pointLights[NUM_OF_POINT_LIGHTS];

// Phong lighting is a combination of ambient, diffuse, and specular

vec3 CalculateLighting(PointLight lightSource, vec3 nromal, vec3 fragPos, vec3 viewDir);

void main()
{
	vec3 norm = normalize(Normal);
	vec3 viewDir = normalize(viewPos - FragPos);

	vec3 result;

	for (int i = 0; i < NUM_OF_POINT_LIGHTS; i++)
	{
		result += CalculateLighting(pointLights[i], norm, FragPos, viewDir);
	}

	FragColor = vec4(result, 1.0);
}

vec3 CalculateLighting(PointLight lightSource, vec3 normal, vec3 fragPos, vec3 viewDir)
{
	// Calculate direction
	vec3 lightDir = normalize(lightSource.position - fragPos);

	// Account for diffuse lighting
	float diff = max(dot(normal, lightDir), 0.0);

	// Account for specular lighting
	vec3 reflectDir = reflect(-lightDir, normal);  
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	
	// Account for distance
    float distance = length(lightSource.position - fragPos);
    float attenuation = 1.0 / (lightSource.constant + lightSource.linear * distance + lightSource.quadratic * (distance * distance));   

	// Combine everything to calculate fragment color
    vec3 ambient = lightSource.ambient * vec3(texture(material.diffuse, v_TexCoord));
    vec3 diffuse = lightSource.diffuse * diff * vec3(texture(material.diffuse, v_TexCoord));
    vec3 specular = lightSource.specular * (spec * material.specular); 

	ambient *= attenuation;
    diffuse *= attenuation;
    specular *= attenuation;
    return (ambient + diffuse + specular);
}