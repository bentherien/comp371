// ambient, diffuse and specular light formulas taken from https://learnopengl.com/Lighting/Basic-Lighting

#version 440
out vec4 FragColor;

in vec3 Normal;
in vec3 FragPos;
in vec2 v_TexCoord;

struct Material {
	sampler2D diffuse;
	vec3 specular;
	float shininess;
};

struct Light {
	vec3 position;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

uniform vec3 viewPos; 
uniform Material material;
uniform Light light;

// Phong lighting is a combination of ambient, diffuse, and specular

void main()
{
	// calculate ambient lighting
	vec3 ambient = light.ambient * texture(material.diffuse, v_TexCoord).rgb;

	// calculate diffuse lighting
	vec3 norm = normalize(Normal);
	vec3 lightDir = normalize(light.position - FragPos);
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = light.diffuse * diff * texture(material.diffuse, v_TexCoord).rgb;

	// calculate specular lighting
	vec3 viewDir = normalize(viewPos - FragPos);
	vec3 reflectDir = reflect(-lightDir, norm);  
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	vec3 specular = light.specular * (spec * material.specular);  

	vec3 result = ambient + diffuse + specular;
	FragColor = vec4(result, 1.0f);
}
