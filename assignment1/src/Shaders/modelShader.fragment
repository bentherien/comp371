// ambient, diffuse and specular light formulas taken from https://learnopengl.com/Lighting/Basic-Lighting

#version 440

#define NUM_OF_POINT_LIGHTS 5

struct PointLight {
	vec3 position;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	
	float constant;
	float linear;
	float quadratic;
};

out vec4 FragColor;

in vec3 Normal;
in vec3 FragPos;

uniform vec3 viewPos; 
uniform vec3 lightColor;
uniform vec3 modelColor;
uniform PointLight pointLights[NUM_OF_POINT_LIGHTS];

vec3 CalculateLighting(PointLight lightSource, vec3 nromal, vec3 fragPos, vec3 viewDir);

// Phong lighting is a combination of ambient, diffuse, and specular

void main()
{
	vec3 norm = normalize(Normal);
	vec3 viewDir = normalize(viewPos - FragPos);

	vec3 result;

	for (int i = 0; i < NUM_OF_POINT_LIGHTS; i++)
	{
		result += CalculateLighting(pointLights[i], norm, FragPos, viewDir);
	}


	FragColor = vec4(result, 1.0);
}

vec3 CalculateLighting(PointLight lightSource, vec3 normal, vec3 fragPos, vec3 viewDir)
{
    // Calculate direction
	vec3 lightDir = normalize(lightSource.position - FragPos);
    
	// Account for diffuse lighting
    float diff = max(dot(normal, lightDir), 0.0);
    
	// Account for specular lighting
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 2.0);
    
	// Account for attenuation (ie. distance from the light)
    float distance = length(lightSource.position - FragPos);
    float attenuation = 1.0 / (lightSource.constant + lightSource.linear * distance + lightSource.quadratic * (distance * distance));    
    
	// Combine everything to calculate fragment color
    vec3 ambient = lightSource.ambient * modelColor;
    vec3 diffuse = lightSource.diffuse * diff * modelColor;
    vec3 specular = lightSource.specular * spec * modelColor;
    
	ambient *= attenuation;
    diffuse *= attenuation;
    specular *= attenuation;

	return (ambient + diffuse + specular);
}