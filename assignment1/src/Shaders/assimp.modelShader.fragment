#version 440

out vec4 FragColor;

in vec3 Normal;
in vec3 FragPos;
in vec2 v_TexCoord;
in vec4 FragPosLightSpace;

struct Material {
	sampler2D diffuse;
	vec3 specular;
	float shininess;
};

struct AssimpMat {
	sampler2D diffuse;
	sampler2D specular;
	float shininess;
};

struct PointLight {
	vec3 position;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;

	float constant;
	float linear;
	float quadratic;
};

uniform int useTextures;
uniform bool useShadows;
uniform sampler2D shadowMap;
uniform vec3 viewPos; 
uniform vec3 lightPos;
uniform Material material;
uniform PointLight pointLight;
uniform AssimpMat assimpMat;
uniform float loaded;



float ShadowCalculation(vec4 fragPosLightSpace);
vec3 CalculateLightingLoaded(PointLight lightSource, vec3 nromal, vec3 fragPos, vec3 viewDir);
vec3 CalculateLighting(PointLight lightSource, vec3 nromal, vec3 fragPos, vec3 viewDir);
vec3 result;

void main()
{
	vec3 norm = normalize(Normal);
	vec3 viewDir = normalize(viewPos - FragPos);

	vec3 result = CalculateLightingLoaded(pointLight, norm, FragPos, viewDir);
	FragColor = vec4(result, 1.0);
}

// Light Calculation Credit - https://learnopengl.com/Lighting/Basic-Lighting
vec3 CalculateLightingLoaded(PointLight lightSource, vec3 normal, vec3 fragPos, vec3 viewDir)
{
	
	if(loaded == 1)
	{

		// Calculate direction
		vec3 lightDir = normalize(lightSource.position - fragPos);

		// Account for diffuse lighting
		float diff = max(dot(normal, lightDir), 0.0);

		// Account for specular lighting
		vec3 reflectDir = reflect(-lightDir, normal);  
		float spec = pow(max(dot(viewDir, reflectDir), 0.0), assimpMat.shininess);
	
		// Account for distance
		float distance = length(lightSource.position - fragPos);
		float attenuation = 1.0 / (lightSource.constant + lightSource.linear * distance + lightSource.quadratic * (distance * distance));   

		vec3 ambient;
		vec3 diffuse;

		// Combine everything to calculate fragment color
		if(useTextures == 1)
		{
			ambient = lightSource.ambient * vec3(texture(assimpMat.diffuse, v_TexCoord));
			diffuse = lightSource.diffuse * diff * vec3(texture(assimpMat.diffuse, v_TexCoord));
		}
		else
		{
			ambient = lightSource.ambient * vec3(1.0,0.0,0.0);
			diffuse = lightSource.diffuse * diff * vec3(1.0,0.0,0.0);
		}
		vec3 specular = lightSource.specular * (spec * vec3(texture(assimpMat.specular, v_TexCoord))); 

		ambient *= attenuation;
		diffuse *= attenuation;
		specular *= attenuation;



		if (useShadows)
		{
			float shadow = ShadowCalculation(FragPosLightSpace);  

			return (ambient + (1.0 - shadow) * (diffuse + specular));
		}

		return (ambient + diffuse + specular);

	}




	else{

		// Calculate direction
		vec3 lightDir = normalize(lightSource.position - fragPos);

		// Account for diffuse lighting
		float diff = max(dot(normal, lightDir), 0.0);

		// Account for specular lighting
		vec3 reflectDir = reflect(-lightDir, normal);  
		float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	
		// Account for distance
		float distance = length(lightSource.position - fragPos);
		float attenuation = 1.0 / (lightSource.constant + lightSource.linear * distance + lightSource.quadratic * (distance * distance));   

		vec3 ambient;
		vec3 diffuse;

		// Combine everything to calculate fragment color
		if(useTextures == 1)
		{
			ambient = lightSource.ambient * vec3(texture(material.diffuse, v_TexCoord));
			diffuse = lightSource.diffuse * diff * vec3(texture(material.diffuse, v_TexCoord));
		}
		else
		{
			ambient = lightSource.ambient * vec3(0.5,0.5,0.5);
			diffuse = lightSource.diffuse * diff * vec3(0.5,0.5,0.5);
		}
		vec3 specular = lightSource.specular * (spec * material.specular); 

		ambient *= attenuation;
		diffuse *= attenuation;
		specular *= attenuation;

		if (useShadows)
		{
			float shadow = ShadowCalculation(FragPosLightSpace);  

			return (ambient + (1.0 - shadow) * (diffuse + specular));
		}

		return (ambient + diffuse + specular);
	}
}


// Light Calculation Credit - https://learnopengl.com/Lighting/Basic-Lighting
vec3 CalculateLighting(PointLight lightSource, vec3 normal, vec3 fragPos, vec3 viewDir)
{

	// Calculate direction
	vec3 lightDir = normalize(lightSource.position - fragPos);

	// Account for diffuse lighting
	float diff = max(dot(normal, lightDir), 0.0);

	// Account for specular lighting
	vec3 reflectDir = reflect(-lightDir, normal);  
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	
	// Account for distance
    float distance = length(lightSource.position - fragPos);
    float attenuation = 1.0 / (lightSource.constant + lightSource.linear * distance + lightSource.quadratic * (distance * distance));   

	vec3 ambient;
	vec3 diffuse;

	// Combine everything to calculate fragment color
	if(useTextures == 1)
	{
		ambient = lightSource.ambient * vec3(texture(material.diffuse, v_TexCoord));
		diffuse = lightSource.diffuse * diff * vec3(texture(material.diffuse, v_TexCoord));
	}
	else
	{
		ambient = lightSource.ambient * vec3(0.5,0.5,0.5);
		diffuse = lightSource.diffuse * diff * vec3(0.5,0.5,0.5);
	}
    vec3 specular = lightSource.specular * (spec * material.specular); 

	ambient *= attenuation;
    diffuse *= attenuation;
    specular *= attenuation;

	if (useShadows)
	{
		float shadow = ShadowCalculation(FragPosLightSpace);  

	    return (ambient + (1.0 - shadow) * (diffuse + specular));
	}

	//return (ambient + diffuse + specular);
	return vec3(0.0,0.0,1.0);
}

// Shadow Calculation Credit - https://learnopengl.com/Advanced-Lighting/Shadows/Shadow-Mapping
float ShadowCalculation(vec4 fragPosLightSpace)
{
   // perform perspective divide
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;

    // transform to [0,1] range
    projCoords = projCoords * 0.5 + 0.5;

    // get closest depth value from light's perspective (using [0,1] range fragPosLight as coords)
    float closestDepth = texture(shadowMap, projCoords.xy).r; 

    // get depth of current fragment from light's perspective
    float currentDepth = projCoords.z;

    // calculate bias (based on depth map resolution and slope)
    vec3 normal = normalize(Normal);
    vec3 lightDir = normalize(lightPos - FragPos);
    float bias = max(0.05 * (1.0 - dot(normal, lightDir)), 0.0015);

    // check whether current frag pos is in shadow
    // float shadow = currentDepth - bias > closestDepth  ? 1.0 : 0.0;
    // PCF
    float shadow = 0.0;
    vec2 texelSize = 1.0 / textureSize(shadowMap, 0);

    for(int x = -1; x <= 1; ++x)
    {
        for(int y = -1; y <= 1; ++y)
        {
            float pcfDepth = texture(shadowMap, projCoords.xy + vec2(x, y) * texelSize).r; 
            shadow += currentDepth - bias > pcfDepth  ? 1.0 : 0.0;        
        }    
    }
    shadow /= 9.0;
    
    // keep the shadow at 0.0 when outside the far_plane region of the light's frustum.
    if(projCoords.z > 1.0)
        shadow = 0.0;
        
    return shadow;
}